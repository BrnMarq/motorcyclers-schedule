{"ast":null,"code":"import { tokenAuthProvider } from 'ra-data-django-rest-framework';\nimport apiUrl from './apiUrl';\nconst authProvider = tokenAuthProvider({\n  obtainAuthTokenUrl: apiUrl + '/api-token-auth/'\n});\nexport const modifiedAuthProvider = { ...authProvider,\n  login: async ({\n    username,\n    password\n  }) => {\n    const request = new Request(apiUrl + '/api-token-auth/', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    const response = await fetch(request);\n\n    if (response.ok) {\n      localStorage.setItem('token', (await response.json()).token);\n      localStorage.setItem('is_staff', (await response.json()).is_staff);\n      return;\n    }\n\n    if (response.headers.get('content-type') !== 'application/json') {\n      throw new Error(response.statusText);\n    }\n\n    const json = await response.json();\n    const error = json.non_field_errors;\n    throw new Error(error || response.statusText);\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('is_staff');\n    return Promise.resolve();\n  },\n  getPermissions: () => {\n    // return localStorage.getItem('is_staff') ? Promise.resolve() : Promise.reject()\n    return Promise.resolve();\n  }\n};","map":{"version":3,"sources":["/home/brnmarq/Documentos/BrnCode/Proyectos/MotorcylerS/frontend/src/components/Admin/Providers/TokenAuthProvider.js"],"names":["tokenAuthProvider","apiUrl","authProvider","obtainAuthTokenUrl","modifiedAuthProvider","login","username","password","request","Request","method","body","JSON","stringify","headers","Headers","response","fetch","ok","localStorage","setItem","json","token","is_staff","get","Error","statusText","error","non_field_errors","logout","removeItem","Promise","resolve","getPermissions"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,YAAY,GAAGF,iBAAiB,CAAC;AAACG,EAAAA,kBAAkB,EAAGF,MAAM,GAAG;AAA/B,CAAD,CAAtC;AAEA,OAAO,MAAMG,oBAAoB,GAAG,EAChC,GAAGF,YAD6B;AAEhCG,EAAAA,KAAK,EAAG,OAAO;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAP,KAAkC;AACtC,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAYR,MAAM,GAAG,kBAArB,EAAyC;AACrDS,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf,CAF+C;AAGrDO,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,wBAAgB;AAAlB,OAAZ;AAH4C,KAAzC,CAAhB;AAKA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,OAAD,CAA5B;;AACA,QAAIQ,QAAQ,CAACE,EAAb,EAAiB;AACbC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8B,CAAC,MAAMJ,QAAQ,CAACK,IAAT,EAAP,EAAwBC,KAAtD;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiC,CAAC,MAAMJ,QAAQ,CAACK,IAAT,EAAP,EAAwBE,QAAzD;AACA;AACH;;AACD,QAAIP,QAAQ,CAACF,OAAT,CAAiBU,GAAjB,CAAqB,cAArB,MAAyC,kBAA7C,EAAiE;AAC7D,YAAM,IAAIC,KAAJ,CAAUT,QAAQ,CAACU,UAAnB,CAAN;AACH;;AACD,UAAML,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;AACA,UAAMM,KAAK,GAAGN,IAAI,CAACO,gBAAnB;AACA,UAAM,IAAIH,KAAJ,CAAUE,KAAK,IAAIX,QAAQ,CAACU,UAA5B,CAAN;AACH,GApB+B;AAqBhCG,EAAAA,MAAM,EAAE,MAAM;AACVV,IAAAA,YAAY,CAACW,UAAb,CAAwB,OAAxB;AACAX,IAAAA,YAAY,CAACW,UAAb,CAAwB,UAAxB;AACA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GAzB+B;AA0BhCC,EAAAA,cAAc,EAAE,MAAM;AAClB;AACA,WAAOF,OAAO,CAACC,OAAR,EAAP;AACH;AA7B+B,CAA7B","sourcesContent":["import { tokenAuthProvider } from 'ra-data-django-rest-framework'\nimport apiUrl from './apiUrl'\n\nconst authProvider = tokenAuthProvider({obtainAuthTokenUrl : apiUrl + '/api-token-auth/'})\n\nexport const modifiedAuthProvider = {\n    ...authProvider,\n    login : async ({ username, password }) => {\n        const request = new Request(apiUrl + '/api-token-auth/', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        });\n        const response = await fetch(request);\n        if (response.ok) {\n            localStorage.setItem('token', (await response.json()).token);\n            localStorage.setItem('is_staff', (await response.json()).is_staff);\n            return;\n        }\n        if (response.headers.get('content-type') !== 'application/json') {\n            throw new Error(response.statusText);\n        }\n        const json = await response.json();\n        const error = json.non_field_errors;\n        throw new Error(error || response.statusText);\n    },\n    logout: () => {\n        localStorage.removeItem('token');\n        localStorage.removeItem('is_staff');\n        return Promise.resolve();\n    },\n    getPermissions: () => {\n        // return localStorage.getItem('is_staff') ? Promise.resolve() : Promise.reject()\n        return Promise.resolve()\n    },\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { tokenAuthProvider } from 'ra-data-django-rest-framework';\nimport apiUrl from './apiUrl';\nconst authProvider = tokenAuthProvider({\n  obtainAuthTokenUrl: apiUrl + '/api-token-auth/'\n});\nexport const modifiedAuthProvider = { ...authProvider,\n  login: async ({\n    username,\n    password\n  }) => {\n    const request = new Request(apiUrl + '/api-token-auth/', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      }),\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      })\n    });\n    const response = await fetch(request);\n\n    if (response.ok) {\n      const data = await response.json();\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('is_staff', data.is_staff);\n      return;\n    }\n\n    if (response.headers.get('content-type') !== 'application/json') {\n      throw new Error(response.statusText);\n    }\n\n    const json = await response.json();\n    const error = json.non_field_errors;\n    throw new Error(error || response.statusText);\n  },\n  logout: () => {\n    const isStaff = localStorage.getItem('is_staff');\n    const isStaffValidation = !isStaff || isStaff !== 'false' ? true : false;\n\n    if (!isStaffValidation) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('is_staff');\n    }\n\n    return Promise.resolve();\n  },\n  checkAuth: () => {\n    const token = localStorage.getItem('token');\n    const isStaff = localStorage.getItem('is_staff');\n    const isStaffValidation = !isStaff || isStaff !== 'false' ? true : false;\n\n    if (isStaffValidation && token) {\n      console.log(\"object\");\n      return Promise.resolve();\n    }\n\n    return Promise.reject({\n      redirectTo: '/'\n    });\n  }\n};","map":{"version":3,"sources":["/home/brnmarq/Documentos/BrnCode/Proyectos/MotorcylerS/frontend/src/components/Admin/Providers/TokenAuthProvider.js"],"names":["tokenAuthProvider","apiUrl","authProvider","obtainAuthTokenUrl","modifiedAuthProvider","login","username","password","request","Request","method","body","JSON","stringify","headers","Headers","response","fetch","ok","data","json","localStorage","setItem","token","is_staff","get","Error","statusText","error","non_field_errors","logout","isStaff","getItem","isStaffValidation","removeItem","Promise","resolve","checkAuth","console","log","reject","redirectTo"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,YAAY,GAAGF,iBAAiB,CAAC;AAACG,EAAAA,kBAAkB,EAAGF,MAAM,GAAG;AAA/B,CAAD,CAAtC;AAEA,OAAO,MAAMG,oBAAoB,GAAG,EAChC,GAAGF,YAD6B;AAEhCG,EAAAA,KAAK,EAAG,OAAO;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAP,KAAkC;AACtC,UAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAYR,MAAM,GAAG,kBAArB,EAAyC;AACrDS,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAAf,CAF+C;AAGrDO,MAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AAAE,wBAAgB;AAAlB,OAAZ;AAH4C,KAAzC,CAAhB;AAKA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,OAAD,CAA5B;;AACA,QAAIQ,QAAQ,CAACE,EAAb,EAAiB;AACb,YAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,IAAI,CAACI,KAAnC;AACAF,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,IAAI,CAACK,QAAtC;AACA;AACH;;AACD,QAAIR,QAAQ,CAACF,OAAT,CAAiBW,GAAjB,CAAqB,cAArB,MAAyC,kBAA7C,EAAiE;AAC7D,YAAM,IAAIC,KAAJ,CAAUV,QAAQ,CAACW,UAAnB,CAAN;AACH;;AACD,UAAMP,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB;AACA,UAAMQ,KAAK,GAAGR,IAAI,CAACS,gBAAnB;AACA,UAAM,IAAIH,KAAJ,CAAUE,KAAK,IAAIZ,QAAQ,CAACW,UAA5B,CAAN;AACH,GArB+B;AAsBhCG,EAAAA,MAAM,EAAE,MAAM;AACV,UAAMC,OAAO,GAAGV,YAAY,CAACW,OAAb,CAAqB,UAArB,CAAhB;AACA,UAAMC,iBAAiB,GAAG,CAACF,OAAD,IAAYA,OAAO,KAAK,OAAxB,GAAkC,IAAlC,GAAyC,KAAnE;;AACA,QAAI,CAACE,iBAAL,EAAwB;AACpBZ,MAAAA,YAAY,CAACa,UAAb,CAAwB,OAAxB;AACAb,MAAAA,YAAY,CAACa,UAAb,CAAwB,UAAxB;AACH;;AACD,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GA9B+B;AA+BhCC,EAAAA,SAAS,EAAE,MAAM;AACb,UAAMd,KAAK,GAAGF,YAAY,CAACW,OAAb,CAAqB,OAArB,CAAd;AACA,UAAMD,OAAO,GAAGV,YAAY,CAACW,OAAb,CAAqB,UAArB,CAAhB;AACA,UAAMC,iBAAiB,GAAG,CAACF,OAAD,IAAYA,OAAO,KAAK,OAAxB,GAAkC,IAAlC,GAAyC,KAAnE;;AACA,QAAIE,iBAAiB,IAAIV,KAAzB,EAAgC;AAC5Be,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,aAAOJ,OAAO,CAACC,OAAR,EAAP;AACH;;AACD,WAAOD,OAAO,CAACK,MAAR,CAAe;AAACC,MAAAA,UAAU,EAAG;AAAd,KAAf,CAAP;AACH;AAxC+B,CAA7B","sourcesContent":["import { tokenAuthProvider } from 'ra-data-django-rest-framework'\nimport apiUrl from './apiUrl'\n\nconst authProvider = tokenAuthProvider({obtainAuthTokenUrl : apiUrl + '/api-token-auth/'})\n\nexport const modifiedAuthProvider = {\n    ...authProvider,\n    login : async ({ username, password }) => {\n        const request = new Request(apiUrl + '/api-token-auth/', {\n            method: 'POST',\n            body: JSON.stringify({ username, password }),\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n        });\n        const response = await fetch(request);\n        if (response.ok) {\n            const data = await response.json()\n            localStorage.setItem('token', data.token);\n            localStorage.setItem('is_staff', data.is_staff);\n            return;\n        }\n        if (response.headers.get('content-type') !== 'application/json') {\n            throw new Error(response.statusText);\n        }\n        const json = await response.json();\n        const error = json.non_field_errors;\n        throw new Error(error || response.statusText);\n    },\n    logout: () => {\n        const isStaff = localStorage.getItem('is_staff')\n        const isStaffValidation = !isStaff || isStaff !== 'false' ? true : false\n        if (!isStaffValidation) {\n            localStorage.removeItem('token');\n            localStorage.removeItem('is_staff');\n        }\n        return Promise.resolve();\n    },\n    checkAuth: () => {\n        const token = localStorage.getItem('token')\n        const isStaff = localStorage.getItem('is_staff')\n        const isStaffValidation = !isStaff || isStaff !== 'false' ? true : false\n        if (isStaffValidation && token) {\n            console.log(\"object\")\n            return Promise.resolve()\n        }\n        return Promise.reject({redirectTo : '/'})\n    },\n}"]},"metadata":{},"sourceType":"module"}